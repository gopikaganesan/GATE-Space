let themeMode = 'blink-mode';
let pcStroke ='#F25278';
let pcColor = 'black';
let pcEdge = 'grey';

function setpcValue(theme){
  switch(theme){
    case 'blink-mode': 
      pcStroke ='#F25278';
      pcColor = 'black';
      pcEdge = 'grey';
      break;
    case 'walker-mode':
      pcStroke ='aqua';
      pcColor = 'azure';
      pcEdge = 'black';
      break;
    case 'llit-mode':
      pcStroke ='azure';
      pcColor = 'white';
      pcEdge = '#00356B';
      break;
  }
}

function assignPCValue(){
  const proElement = document.getElementById('progressTag');
  if(proElement.classList.contains('pc')){
  proElement.querySelector('.pc').setAttribute('stroke',pcStroke);
  proElement.querySelector('.pc').setAttribute('color',pcColor);
  proElement.querySelector('.pc').setAttribute('edge',pcEdge);
  }
}

document.addEventListener('DOMContentLoaded', () => {

  const userName = localStorage.getItem('User name');
  const userMode = localStorage.getItem('Mode Theme');

  if(!userName) {
    window.location.href ='page/setUserName.html';
  } else {
    const nameValue = 'Hi ' + userName + '!';
    const h2Element = document.getElementById('name');
    const h2TextContent = document.createTextNode(nameValue);
    const spanElement = document.createElement('span');
    spanElement.id = 'editButton';
    const editMoji = document.createTextNode(' ✏️');
    const underlineElement = document.createElement('u');
    underlineElement.textContent = 'Edit';
    spanElement.appendChild(editMoji);
    spanElement.appendChild(underlineElement);
  
    spanElement.onclick = ()=>{
      window.location.href = 'page/setUserName.html';
    };
    h2Element.appendChild(h2TextContent);
    h2Element.appendChild(spanElement);
  }

  if(userMode){
    themeMode = userMode;   
  } 
  setThemeMode(themeMode);
});


const apiUrl = 'https://script.google.com/macros/s/AKfycbybWxx-4xTy3O7wVFB4WKhtIrSIsvr_W9x6658XgTdU0ZHLXpzVtho7t_HE8J1gdiM/exec'; // Replace with your API endpoint URL
//Replace the URL generated by deployed AppScript which return JSON from Sheet data

var progressValue = 0;

async function fetchData() {
  try {
    
    // const proxyUrl = 'https://api.allorigins.win/get?url=';
    // const response = await fetch(proxyUrl + encodeURIComponent(apiUrl));
    // Uncomment above code if the URL required Proxy
    const response = await fetch(apiUrl);
    const jsonData = await response.json();

    // Do anything with the response you got from here
    const genSubs = jsonData.filter(subData => subData['Type'] === 'general');
    createCards('gen-sub',genSubs);
    const coreSubs = jsonData.filter(subData => subData['Type'] === 'core');
    createCards('core-sub',coreSubs);

    const totalProgress = jsonData.find(totPro => totPro['Sub Id'] === 'TOTAL')
    progressValue = (totalProgress['Progress']*100).toFixed(0);
    createCircularProgress(progressValue);
    console.log("Looks like the data has been fetched properly.. So, Bye for now, Hwaiting!")

  } catch (error) {
    console.error('Error fetching data:', error);
  }
}



// Days to Go Calculator  

function calculateDays() {
    const startDate = new Date();
    const endDate = new Date(2025,1,1);  // Your D-Day here (YYYY,MM,DD) Here 0 in MM represents January
    const timeDifference = endDate - startDate;
    const daysDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
    return daysDifference;   
}

document.getElementById("d2go").textContent = calculateDays();


// dynamic sub-cards

function createCards(category,cardData) {
    const container = document.getElementById(category).querySelector('.subList');
    const template = document.getElementById('card-template');

    cardData.forEach((data) => {
        const clone = document.importNode(template.content, true);
        const card = clone.querySelector('a');

        // Customize card content
        card.setAttribute("href",data['url']);
        card.querySelector('.subName').textContent = data['Subject Title'];
        card.querySelector('progress').setAttribute("value",(data['Progress']*100));
        card.querySelector('.progress-value').textContent = (data['Progress']*100).toFixed(0) + "%";
        
          // Set background color dynamically
            card.querySelector('.subCard').style = data.styleValue;

        // Append the card to the container
        container.appendChild(card);

    });
}

function createCircularProgress(percent){

 
  const container = document.querySelector('.progress-space');
  if(percent < 1){

      // Create a new div element
  const newDiv = document.createElement('div');

  // Set the text content of the new div
  newDiv.textContent = 'No Progress';

  newDiv.style = "background-color: sandybrown;padding: 25px;font-size: 20px;font-family: fantasy;border-radius: 100%;display: ruby-text;border: 8px ridge black; color: black; text-shadow: none;";

  // Append the new div to the container
  container.appendChild(newDiv);
  }
   else
   {
  const template = document.getElementById('circular-progress');

  const clone = document.importNode(template.content, true);
  const card = clone.getElementById('progressTag');

  card.querySelector('.pc').setAttribute('value',(percent+"%"));
  card.querySelector('.pc').setAttribute('stroke',pcStroke);
  card.querySelector('.pc').setAttribute('color',pcColor);
  card.querySelector('.pc').setAttribute('edge',pcEdge);

  container.appendChild(card);
   }
  

}

let currTheme = themeMode;
let themeVisible = false;

function setThemeVisibility(){
  themeVisible = !themeVisible;
  if(themeVisible){
    document.getElementById('themeOptions').setAttribute('style', ' display: flex; justify-content: center; flex-flow: wrap;');
  } else {
    document.getElementById('themeOptions').setAttribute('style', 'display: none;');
  }
  window.scrollTo(0, document.body.scrollHeight);
  if(themeMode != currTheme){
    setThemeMode(themeMode);
  }
}


function setThemeMode(theme){
  currTheme = theme;
  document.documentElement.className = theme;
  setpcValue(theme);
  // assignPCValue(); /* I wish this works*/
}

function saveTheme(){
  themeMode = currTheme;
  localStorage.setItem('Mode Theme',themeMode);
  setThemeVisibility();
}

// Basic Details Settings

function setCheckList(url,displayName = "Google Sheets"){

  const checkLinkTag = document.getElementById('checkLink');
  checkLinkTag.setAttribute('href',url);
  checkLinkTag.textContent = displayName;

}


function getPlaylist(){
  const userMode = localStorage.getItem('Mode Theme');
  switch (userMode){
    case 'blink-mode':
      return "https://open.spotify.com/embed/playlist/37i9dQZF1DX8kP0ioXjxIA?utm_source=generator";
    case 'walker-mode':
      return "https://open.spotify.com/embed/playlist/37i9dQZF1DZ06evO4rvWRa?utm_source=generator&theme=0";
    case 'llit-mode':
      return "https://open.spotify.com/embed/playlist/37i9dQZF1DX9tPFwDMOaN1?utm_source=generator&theme=0";
    default:
      return "https://open.spotify.com/embed/playlist/37i9dQZF1DX5KpP2LN299J?utm_source=generator";
  }
}

let showSpotify = false;

function showSpotifyPlaylist(){
  showSpotify = !showSpotify;
  if(showSpotify){
    document.getElementById('spotifyEmbeded').setAttribute('style','display: block;');
    const playlist= getPlaylist();
    document.getElementById('spotifyFrame').src = playlist;
    document.getElementById('spotifyFrame').scrollIntoView();
  } else {
    document.getElementById('spotifyEmbeded').setAttribute('style','display: none;');

  }

}


// Your CheckList url
const checkListURL = "https://docs.google.com/spreadsheets/d/1YWPGMhzSt49pfWOxPgbWaYZPppHFFXXFGDNB9Qg-loI/edit?usp=sharing";
setCheckList(checkListURL);

console.log("Ah! I see you are looking into the console...");
console.log("HEYYY.. You only.. Make sure you rest your eyes properly, stay hydrated and Take care of your health OKAY?");

fetchData();